legend('bottomleft',
c('Lower fraction','Upper fraction'),
col = c('red','black'),
pch = 19,
bg = 'white')
library(pcaPP)
X.rpc <- PCAgrid(data,
k=2,
scale=mad)
T <- X.rpc$scores
vp.rpc <- (X.rpc$sdev)^2
var.rpc <- vp.rpc/sum(vp.rpc)*100
plot(T[,1],
T[,2],
pch = 19,
xlab = paste('PC 1 -',as.character(round(var.rpc[1],2)), '%'),
ylab = paste('PC 2 -',as.character(round(var.rpc[2],2)), '%'),
col = class
)
abline(h = 0, v =  0, lty=2)
legend('bottomleft',
c('Lower fraction','Upper fraction'),
col = c('red','black'),
pch = 19,
bg = 'white')
vp.pca <- (class.pca$sdev)^2
class.pca <- prcomp(data)
vp.pca <- (class.pca$sdev)^2
var.pca <- vp.pca/sum(vp.pca)*100
scores <- class.pca$x
var.pca <- vp.pca/sum(vp.pca)*100
var.pca
class.pca <- prcomp(data, scale =T)
class.pca <- prcomp(data, scale = T)
str(data)
class.pca <- prcomp(data, scale = T)
?prcomp
class.pca <- prcomp(data, scale. = T)
class.pca <- prcomp(data)
vp.pca <- (class.pca$sdev)^2
var.pca <- vp.pca/sum(vp.pca)*100
scores <- class.pca$x
plot(scores[,1],
scores[,2],
pch = 19,
xlab = paste('PC 1 -',as.character(round(var.pca[1],2)), '%'),
ylab = paste('PC 2 -',as.character(round(var.pca[2],2)), '%'),
col = class
)
library(pcaPP)
X.rpc <- PCAgrid(data,
k=3,
scale=mad)
T <- X.rpc$scores
vp.rpc <- (X.rpc$sdev)^2
var.rpc <- vp.rpc/sum(vp.rpc)*100
plot(T[,1],
T[,2],
pch = 19,
xlab = paste('PC 1 -',as.character(round(var.rpc[1],2)), '%'),
ylab = paste('PC 2 -',as.character(round(var.rpc[2],2)), '%'),
col = class
)
abline(h = 0, v =  0, lty=2)
legend('bottomleft',
c('Lower fraction','Upper fraction'),
col = c('red','black'),
pch = 19,
bg = 'white')
library(pcaPP)
X.rpc <- PCAgrid(data,
k=2,
scale=mad)
T <- X.rpc$scores
vp.rpc <- (X.rpc$sdev)^2
var.rpc <- vp.rpc/sum(vp.rpc)*100
plot(T[,1],
T[,2],
pch = 19,
xlab = paste('PC 1 -',as.character(round(var.rpc[1],2)), '%'),
ylab = paste('PC 2 -',as.character(round(var.rpc[2],2)), '%'),
col = class
)
abline(h = 0, v =  0, lty=2)
legend('bottomleft',
c('Lower fraction','Upper fraction'),
col = c('red','black'),
pch = 19,
bg = 'white')
bend <- 0.1 * wl.eval(spc,
function(x) x^6+x^5+x^4+x^3+x^2,
normalize.wl=normalize01
)
# plot(bend, wl.reverse =T)
bl <- spc.rubberband (spc+bend, noise = 1e-4, df=20) - bend
sum <- spc+bend
spc3 <- spc - bl
plot(spc, wl.reverse = TRUE)
plot(bl, add=TRUE, col=2,wl.reverse = TRUE)
plot(sum,wl.reverse = TRUE)
plot(bend, add=TRUE, col=2,wl.reverse = TRUE)
plot(spc3,wl.reverse = TRUE)
corrected <- as.data.frame(spc3[1:31])
corrected <- as.data.frame(corrected[,1])
for(i in 1:length(rownames(corrected))){
plot(wn,
corrected[i,],
xlab = 'wave number cm-1',
ylab = 'absorbance a.u.',
xlim = c(1700,400),
ylim = c(0,0.18),
type = 'l',
col = class[i])
par(new = T)
}
dev.off()
for(i in 1:length(rownames(corrected))){
plot(wn,
corrected[i,],
xlab = 'wave number cm-1',
ylab = 'absorbance a.u.',
xlim = c(1700,400),
ylim = c(0,0.18),
type = 'l',
col = class[i])
par(new = T)
}
names <- list.files(pattern = '.CSV')
for(i in 1:length(rownames(corrected))){
plot(wn,
corrected[i,],
xlab = 'wave number cm-1',
ylab = 'absorbance a.u.',
xlim = c(1700,400),
ylim = c(0,0.18),
type = 'l',
col = class[i])
par(new = T)
}
for(i in 1:length(rownames(data))){
plot(wn,
data[i,],
axes=F,
xlab = '',
ylab = '',
xlim = c(1700,400),
ylim = c(0,0.3),
type = 'l',
col = class[i])
par(new = T)
}
q()
names <- list.files(pattern = '.CSV')
spectra <- lapply(names, read.csv, header = F)
wn <- spectra[[1]][,1]
absorbances <- lapply(spectra, '[' , 2)
absorbances <- as.data.frame(absorbances) # convert list of data.frames to one data.frame
absorbances <- t(absorbances) #arrange variables in columns and subjects in rows
colnames(absorbances) <- wn
rownames(absorbances) <- names
for(i in 1:length(rownames(absorbances))){
if(grepl('(?=.*_A|_ A|_B|_ B)',
rownames(absorbances)[i],
perl = T)){rownames(absorbances)[i] <- sub('@','',rownames(absorbances)[i])}else{}
}
rownames(absorbances)
indexUpper <- which(grepl('(?=.*@)', rownames(absorbances), perl = T))
Upper <- absorbances[indexUpper,]
searchGridUpper <-  expand.grid(Temperature = c('Room T','50C'),
Time = c('2 min', '4 min' , '6 min', '8 min'),
Treatment =c('A','B'))
rownames.prom.Upper <- character(16)
for (i in 1:16){
rownames.prom.Upper[i] <- paste('@',searchGridUpper[i,1],searchGridUpper[i,2],searchGridUpper[i,3])
}
rownames.prom.Upper
rownames.prom.Upper <- rownames.prom.Upper[-c(11)]
promUpper <- matrix(
ncol= ncol(Upper),
nrow = 15)
index.rep.Upper <- vector('list',15)
searchGridUpper[11,]
searchGridUpper <- searchGridUpper[-c(11),]
dim(searchGridUpper)
for(i in 1:15)for(i in 1:15){
index.rep.Upper[[i]] <- c(which(grepl(paste0('(?=.*',
as.character(searchGridUpper[i,1]),
')(?=.*',
as.character(searchGridUpper[i,2]),
')(?=.*',
as.character(searchGridUpper[i,3]),
')'
) ,
rownames(Upper),
perl = T))
)
}
for(i in 1:15){
for(j in 1:length(colnames(Upper))){
if(length(index.rep.Upper[[i]])==2){
promUpper[i,j] <- mean(c(Upper[index.rep.Upper[[i]][1],j],
Upper[index.rep.Upper[[i]][2],j]
) )
}else{
promUpper[i,j] <- mean(c(Upper[index.rep.Upper[[i]][1],j],
Upper[index.rep.Upper[[i]][2],j],
Upper[index.rep.Upper[[i]][3],j]
) )
}
}
}
rownames(promUpper) <- rownames.prom.Upper
colnames(promUpper) <- wn
indexLower <- which(grepl('^((?!@).)*$', rownames(absorbances), perl = T))
Lower <- absorbances[indexLower,]
searchGridLower <-  expand.grid(Temperature = c('Room T','50C'),
Time = c('2 min', '4 min' , '6 min', '8 min'),
Treatment =c('A','B'))
rownames.prom.Lower <- character(16)
for (i in 1:16){
rownames.prom.Lower[i] <- paste(searchGridLower[i,1],searchGridLower[i,2],searchGridLower[i,3])
}
rownames.prom.Lower
promLower <- matrix(
ncol= ncol(Lower),
nrow = nrow(Lower)/3)
index.rep.Lower <- vector('list',16)
for(i in 1:16)for(i in 1:16){
index.rep.Lower[[i]] <- c(which(grepl(paste0('(?=.*',
as.character(searchGridLower[i,1]),
')(?=.*',
as.character(searchGridLower[i,2]),
')(?=.*',
as.character(searchGridLower[i,3]),
')'
) ,
rownames(Lower),
perl = T))
)
}
for(i in 1:16){
for(j in 1:length(colnames(Lower))){
promLower[i,j] <- mean(c(Lower[index.rep.Lower[[i]][1],j],
Lower[index.rep.Lower[[i]][2],j],
Lower[index.rep.Lower[[i]][3],j]
) )
}
}
rownames(promLower) <- rownames.prom.Lower
colnames(promLower) <- wn
data <- rbind(promUpper,promLower)
rownames(data)[1:15] <- rownames(promUpper)
rownames(data)[16:31] <- rownames(promLower)
class <- vector('character', length = length(rownames(data)))
for(i in 1:length(rownames(data)))
{
if(
grepl('(?=.*@)', rownames(data)[i], perl = T)
) {class[i] <- 'black'}else{
class[i] <- 'red'
}
}
class
for(i in 1:length(rownames(data))){
plot(wn,
data[i,],
axes=F,
xlab = '',
ylab = '',
xlim = c(4000,400),
ylim = c(0,0.3),
type = 'l',
col = class[i])
par(new = T)
}
class.pca <- prcomp(corrected)
vp.pca <- (class.pca$sdev)^2
var.pca <- vp.pca/sum(vp.pca)*100
scores <- class.pca$x
plot(scores[,1],
scores[,2],
pch = 19,
xlab = paste('PC 1 -',as.character(round(var.pca[1],2)), '%'),
ylab = paste('PC 2 -',as.character(round(var.pca[2],2)), '%'),
col = class
)
abline(h = 0, v =  0, lty=2)
legend('bottomleft',
c('Lower fraction','Upper fraction'),
col = c('red','black'),
pch = 19,
bg = 'white')
for(i in 1:length(rownames(corrected))){
plot(wn,
corrected[i,],
xlab = 'wave number cm-1',
ylab = 'absorbance a.u.',
xlim = c(1700,400),
ylim = c(0,0.18),
type = 'l',
col = class[i])
par(new = T)
}
str(wn)
str(corrected)
wn <- as.numeric( colnames(data)[1:676])
names <- list.files(pattern = '.CSV')
spectra <- lapply(names, read.csv, header = F)
wn <- spectra[[1]][,1]
absorbances <- lapply(spectra, '[' , 2)
absorbances <- as.data.frame(absorbances) # convert list of data.frames to one data.frame
absorbances <- t(absorbances) #arrange variables in columns and subjects in rows
colnames(absorbances) <- wn
rownames(absorbances) <- names
for(i in 1:length(rownames(absorbances))){
if(grepl('(?=.*_A|_ A|_B|_ B)',
rownames(absorbances)[i],
perl = T)){rownames(absorbances)[i] <- sub('@','',rownames(absorbances)[i])}else{}
}
rownames(absorbances)
indexUpper <- which(grepl('(?=.*@)', rownames(absorbances), perl = T))
Upper <- absorbances[indexUpper,]
searchGridUpper <-  expand.grid(Temperature = c('Room T','50C'),
Time = c('2 min', '4 min' , '6 min', '8 min'),
Treatment =c('A','B'))
rownames.prom.Upper <- character(16)
for (i in 1:16){
rownames.prom.Upper[i] <- paste('@',searchGridUpper[i,1],searchGridUpper[i,2],searchGridUpper[i,3])
}
rownames.prom.Upper
rownames.prom.Upper <- rownames.prom.Upper[-c(11)]
promUpper <- matrix(
ncol= ncol(Upper),
nrow = 15)
index.rep.Upper <- vector('list',15)
searchGridUpper[11,]
searchGridUpper <- searchGridUpper[-c(11),]
dim(searchGridUpper)
for(i in 1:15)for(i in 1:15){
index.rep.Upper[[i]] <- c(which(grepl(paste0('(?=.*',
as.character(searchGridUpper[i,1]),
')(?=.*',
as.character(searchGridUpper[i,2]),
')(?=.*',
as.character(searchGridUpper[i,3]),
')'
) ,
rownames(Upper),
perl = T))
)
}
for(i in 1:15){
for(j in 1:length(colnames(Upper))){
if(length(index.rep.Upper[[i]])==2){
promUpper[i,j] <- mean(c(Upper[index.rep.Upper[[i]][1],j],
Upper[index.rep.Upper[[i]][2],j]
) )
}else{
promUpper[i,j] <- mean(c(Upper[index.rep.Upper[[i]][1],j],
Upper[index.rep.Upper[[i]][2],j],
Upper[index.rep.Upper[[i]][3],j]
) )
}
}
}
rownames(promUpper) <- rownames.prom.Upper
colnames(promUpper) <- wn
indexLower <- which(grepl('^((?!@).)*$', rownames(absorbances), perl = T))
Lower <- absorbances[indexLower,]
searchGridLower <-  expand.grid(Temperature = c('Room T','50C'),
Time = c('2 min', '4 min' , '6 min', '8 min'),
Treatment =c('A','B'))
rownames.prom.Lower <- character(16)
for (i in 1:16){
rownames.prom.Lower[i] <- paste(searchGridLower[i,1],searchGridLower[i,2],searchGridLower[i,3])
}
rownames.prom.Lower
promLower <- matrix(
ncol= ncol(Lower),
nrow = nrow(Lower)/3)
index.rep.Lower <- vector('list',16)
for(i in 1:16)for(i in 1:16){
index.rep.Lower[[i]] <- c(which(grepl(paste0('(?=.*',
as.character(searchGridLower[i,1]),
')(?=.*',
as.character(searchGridLower[i,2]),
')(?=.*',
as.character(searchGridLower[i,3]),
')'
) ,
rownames(Lower),
perl = T))
)
}
for(i in 1:16){
for(j in 1:length(colnames(Lower))){
promLower[i,j] <- mean(c(Lower[index.rep.Lower[[i]][1],j],
Lower[index.rep.Lower[[i]][2],j],
Lower[index.rep.Lower[[i]][3],j]
) )
}
}
rownames(promLower) <- rownames.prom.Lower
colnames(promLower) <- wn
data <- rbind(promUpper,promLower)
rownames(data)[1:15] <- rownames(promUpper)
rownames(data)[16:31] <- rownames(promLower)
class <- vector('character', length = length(rownames(data)))
for(i in 1:length(rownames(data)))
{
if(
grepl('(?=.*@)', rownames(data)[i], perl = T)
) {class[i] <- 'black'}else{
class[i] <- 'red'
}
}
class
for(i in 1:length(rownames(data))){
plot(wn,
data[i,],
axes=F,
xlab = '',
ylab = '',
xlim = c(4000,400),
ylim = c(0,0.3),
type = 'l',
col = class[i])
par(new = T)
}
for(i in 1:length(rownames(data))){
plot(wn,
data[i,],
axes=F,
xlab = '',
ylab = '',
xlim = c(1700,400),
ylim = c(0,0.3),
type = 'l',
col = class[i])
par(new = T)
}
library(prospectr)
w2 <- 40
sg <- matrix(ncol = ncol(corregido2)-w2, nrow= nrow(corregido2))
library(prospectr)
w2 <- 40
sg <- matrix(ncol = ncol(corrected)-w2, nrow= nrow(corrected))
sg <- as.data.frame(sg)
# for (i in 1:31){
sg<- savitzkyGolay(X = corrected
,m = 2,
p = 3,
w = w2+1,
delta.wav=2)
# }
# colnames(sg) <- colnames( savitzkyGolay(X = corregido2[1,]
#                         ,m = 2,
#                         p = 3,
#                         w = w2+1,
#                         delta.wav=2))
rownames(sg) <- rownames(corregido2)
library(prospectr)
w2 <- 40
sg <- matrix(ncol = ncol(corrected)-w2, nrow= nrow(corrected))
sg <- as.data.frame(sg)
# for (i in 1:31){
sg<- savitzkyGolay(X = corrected
,m = 2,
p = 3,
w = w2+1,
delta.wav=2)
# }
# colnames(sg) <- colnames( savitzkyGolay(X = corregido2[1,]
#                         ,m = 2,
#                         p = 3,
#                         w = w2+1,
#                         delta.wav=2))
rownames(sg) <- rownames(corrected)
# win.graph()
for(i in 1:length(rownames(sg))){
plot(as.numeric(colnames(sg)),
sg[i,],
xlab = 'wave number cm-1',
ylab = '2nd derivative of abs',
xlim = c(1700,400),
ylim = c(-1e-04,1e-04),
type = 'l',
col = class[i])
par(new = T)
}
class.pca <- prcomp(sg)
vp.pca <- (class.pca$sdev)^2
var.pca <- vp.pca/sum(vp.pca)*100
scores <- class.pca$x
plot(scores[,1],
scores[,2],
pch = 19,
xlab = paste('PC 1 -',as.character(round(var.pca[1],2)), '%'),
ylab = paste('PC 2 -',as.character(round(var.pca[2],2)), '%'),
col = class
)
abline(h = 0, v =  0, lty=2)
legend('bottomleft',
c('Lower fraction','Upper fraction'),
col = c('red','black'),
pch = 19,
bg = 'white')
class.pca <- prcomp(sg,scale=T, center = T)
View(data)
View(corrected)
View(sg)
class.pca <- prcomp(corrected ,scale=T, center = T)
